package game.gui.wizard;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import engine.io.FileManager;
import game.core.InfinityGame;
import game.setup.GameWizard;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.util.List;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class LoadGameUI {
    public JPanel mainPanel;
    private JLabel loadGameLabel;
    private JTextField loadGameField;
    private JLabel gameFoundLabel;
    private JButton loadGameButton;
    private JButton backButton;
    private JList gameList;

    private boolean fileFound = false;

    public LoadGameUI(LoadGameWindow currentWindow) {
        InfinityGame.gameWizard.refreshGameList();

        $$$setupUI$$$();
        loadGameButton.setEnabled(false);
        gameFoundLabel.setForeground(Color.RED);
        gameFoundLabel.setText("Game Not Found.");

        loadGameField.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                labelChanged();
            }

            public void removeUpdate(DocumentEvent e) {
                labelChanged();
            }

            public void insertUpdate(DocumentEvent e) {
                labelChanged();
            }

            public void labelChanged() {
                String saveName = loadGameField.getText();
                gameList.clearSelection();

                fileFound = FileManager.doesFileExist(saveName + GameWizard.MAIN_SAVE_EXT);

                if (fileFound) {
                    loadGameButton.setEnabled(true);
                    gameFoundLabel.setForeground(Color.GREEN);
                    gameFoundLabel.setText("Game Found!");
                } else {
                    loadGameButton.setEnabled(false);
                    gameFoundLabel.setForeground(Color.RED);
                    gameFoundLabel.setText("Game Not Found.");
                }
            }
        });
        loadGameButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (fileFound) {
                    currentWindow.dispose();
                    InfinityGame.gameWizard.startGame(InfinityGame.gameWizard.loadGame(loadGameField.getText()));
                }
            }
        });
        backButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentWindow.dispose();
                new GameWizardWindow();
            }
        });
        gameList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (gameList.getSelectedIndex() != -1) {
                    fileFound = true;
                    loadGameButton.setEnabled(true);
                    gameFoundLabel.setForeground(Color.GREEN);
                    gameFoundLabel.setText("Game Found!");

                    loadGameField.setText((String) gameList.getSelectedValue());
                }
            }
        });
    }

    private DefaultListModel initializeList() {
        List<String> games = InfinityGame.gameWizard.getGameList();
        DefaultListModel model = new DefaultListModel();

        for (String game : games) {
            model.addElement(game);
        }

        return model;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        gameList = new JList(initializeList());
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
        loadGameLabel = new JLabel();
        loadGameLabel.setText("Game Name:");
        mainPanel.add(loadGameLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loadGameField = new JTextField();
        mainPanel.add(loadGameField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        gameFoundLabel = new JLabel();
        gameFoundLabel.setText("Game not found.");
        mainPanel.add(gameFoundLabel, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        loadGameButton = new JButton();
        loadGameButton.setText("Load Game");
        mainPanel.add(loadGameButton, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        backButton = new JButton();
        backButton.setText("Back");
        mainPanel.add(backButton, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        gameList.setEnabled(true);
        gameList.setOpaque(false);
        gameList.setSelectionBackground(new Color(-11626800));
        gameList.setSelectionMode(0);
        mainPanel.add(gameList, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
